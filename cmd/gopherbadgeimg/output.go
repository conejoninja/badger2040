package main

import (
	"encoding/base64"
	"fmt"
	"os"
)

// EncodeToString is a friendly-named function for hooking into base64
func EncodeToString(imageBits []byte) string {
	return base64.StdEncoding.EncodeToString(imageBits)
}

// WriteToBinFile create an go:embed-able file containing the image data.
//
// Provides a .bin file that's just the raw bytes of the image.
// You can then use a go:embed directive to bake this bin file into your code at
// compile time (be nice to your editor's memory!).
// see an example of this in the main_test.go file.
func WriteToBinFile(filename string, imageBits []byte) error {
	outf, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer outf.Close()
	_, err = outf.Write(imageBits)
	return err
}

// Create a go file with the bytes hardcoded into a variable at build
func WriteToGoFile(filename, variablename string, imageBits []byte) error {
	outf, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer outf.Close()
	_, err = outf.Write(
		[]byte(
			"// Code generated by " + os.Args[0] + " DO NOT EDIT.\n\npackage main\n\nvar r" + variablename + " = []byte{",
		),
	)
	if err != nil {
		return err
	}

	for i, b := range imageBits {
		if i%32 == 0 {
			_, err = outf.Write([]byte("\n\t"))
			if err != nil {
				return err
			}
		}
		bStr := fmt.Sprintf("0x%02X, ", b)
		_, err = outf.Write([]byte(bStr))
		if err != nil {
			return err
		}
	}
	_, err = outf.Write([]byte("\n}\n"))
	return err
}
